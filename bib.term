[

{
  class     : incollection,
  key       : 'Hughes95',
  authors   : ['John Hughes'],
  title     : 'The Design of a Pretty-printing Library',
  pages     : '53-96',
  booktitle : 'Advanced Functional Programming, First International Spring School on Advanced Functional Programming Techniques, AFP 1995, Tutorial Text',
  publisher : 'Springer',
  series    : 'LNCS',
  volume    : 925,
  year      : 1995,
  access    : closed,
  url       : 'http://link.springer.com/chapter/10.1007\%2F3-540-59451-5_3',
  note      : [],
  required  : ['functional programming'],
  provided  : ['pretty printing', 'combinator library'],
  annote    : 'Pretty printing is clearly an important form of language processing. This is not the first paper on a declarative and compositional approach to pretty printing; it stands out though with a very accessible presentation explaining the design and implementation of a (Haskell-based) combinator library for pretty printing. This library can be viewed as providing a simple \\emph{embedded language} for pretty printing.',
  figure    : 'The figure shows snippets (two Haskell terms and one Haskell function) taken from the paper. The figure illustrates pretty printing for binary trees with a string as info at each fork (i.e., non-leaf) node. The pretty-printed term uses line breaks and indentation for prettiness. The pretty printing function maps trees to documents; see the reference to the \\emph{Doc} type. Pretty printer combinators are used; see `sep\' for example.'
},

{ 
  class     : inproceedings,
  key       : 'AlvesV08',
  authors   : ['Tiago L. Alves', 'Joost Visser'],
  title     : 'A Case Study in Grammar Engineering',
  pages     : '285-304',
  booktitle : 'Software Language Engineering, First International Conference, SLE 2008, Revised Selected Papers',
  publisher : 'Springer',
  series    : 'LNCS',
  volume    : 5452,
  year      : 2009,
  access    : adhoc,
  url       : 'http://wiki.di.uminho.pt/twiki/pub/Personal/Tiago/Publications/grammar-eng.pdf',
  note      : [],
  required  : ['software engineering', 'parsing', 'metrics'],
  provided  : ['grammar engineering', 'grammar recovery', 'grammar metrics', 'grammar testing', 'grammar versioning'],
  annote    : 'The `Grammarware Agenda\' \\extraref{KlintLV05} properly established the terms grammar engineering (and grammarware engineering). The present paper presents a study that involves several areas of grammarware engineering. The study is concerned with the development of a VDM-SL grammar for actual parsing from its ISO standard language reference. The study involves grammar transformation (recovery), testing, metrics, and version management.',
  figure    : 'The figure, taken from the paper, shows the development of different grammar metrics over time. The timeline is defined by the commits of the grammar, as it was changed over time to complete the recovery process and to otherwise develop the parser. Test coverage also drives this process.'
  
},

{
  class     : inproceedings,
  key       : 'SirerB99',
  authors   : ['Emin G{\\"u}n Sirer', 'Brian N. Bershad'],
  title     : 'Using production grammars in software testing',
  pages     : '1-13',
  booktitle : 'Proceedings of Second Conference on Domain-Specific Languages (DSL 1999)',
  publisher : 'ACM',
  year      : '1999',
  access    : adhoc,
  url       : 'http://www.cs.cornell.edu/people/egs/papers/kimera-dsl99.pdf',
  note      : [],
  required  : ['software engineering'],
  provided  : ['grammar-based testing'],
  annote    : 'The paper shows how grammar-based test-data generation and an accompanying methodology of testing may be highly effective and scalable for testing language-based software, in fact, the Java Virtual Machine. Previous publications on grammar-based testing mainly focused on compiler testing. The paper relies on a domain-specific language \\emph{lava} for specifying grammars from which to generate test data -- bytecode, in this case. The generated test data is used for stress tesing the JVM verifier and also for comparative tesing of different verifiers.',
  figure    : 'The figure, taken from the paper, carries the following caption (in the paper): The structure of the test generation process. A code-generator-generator parses a production grammar, generates a code-generator, which in turn probabilistically generates test cases based on a seed.'
},

{
  class     : inproceedings,
  key       : 'Cordy09',
  authors   : ['James R. Cordy'],
  title     : 'Excerpts from the TXL Cookbook',
  pages     : '27-91',
  booktitle : 'Generative and Transformational Techniques in Software Engineering III - International Summer School, GTTSE 2009, Revised Papers',
  publisher : 'Springer',
  series    : 'LNCS',
  volume    : 6491,
  year      : 2011,
  access    : adhoc,
  url       : 'http://cs.queensu.ca/~cordy/Papers/JC_TXLCookbook_LNCS.pdf',
  note      : [],
  required  : ['software engineering'],
  provided  : ['source-code analysis', 'source-code transformation'],
  annote    : 'The paper captures some reusable knowledge of implementating software components for source-code analysis and transformation. While the paper is focused on TXL as the underlying transformation system, the overall approach to knowledge representation would also make sense for other systems. The following classes of problems are considered: parsing, restructuring, optimization, static analysis, and interpretation. The solutions to the problems are described in terms of `paradigms\' such as `Use sequences, not recursions\', `Preserve comments in output\', `Generate unique identifiers\'.',
  figure    : 'The figure, taken from the paper, shows a simple TXL rule and its effect on a parse tree. In fact, a binary addition on constants is evaluated, thereby contributing to expression simplification.'
},

{
  class     : inproceedings,
  key       : 'Hainaut06',
  authors   : ['Jean-Luc Hainaut'],
  title     : 'The Transformational Approach to Database Engineering',
  pages     : '95-143',
  booktitle : 'Generative and Transformational Techniques in Software Engineering,
               International Summer School, GTTSE 2005, Revised Papers',
  publisher : 'Springer',
  series    : 'LNCS',
  volume    : 4143,
  year      : 2006,
  access    : closed,
  url       : 'http://link.springer.com/chapter/10.1007%2F11877028_4',
  note      : [],
  required  : ['entity-relationship model', 'relational database'],
  provided  : ['schema normalization', 'logical design', 'schema integration', 'view derivation', 'schema equivalence', 'data conversion', 'data reverse engineering', 'schema optimization', 'data access wapper generation'],
  annote    : 'The paper describes fundamental and practical aspects of database transformation techniques. In particular, the notion of transformation is developed in combination with the correctness and reversibility properties.',
  figure    : 'The figure, taken from the paper, shows a particular transformation rule. Quoting from the paper ``Transforming an is-a hierarchy into one-to-one relationship types and conversely. The exclusion constraint (excl:s.C,r.B) states that an A entity cannot be simultaneously linked to a B entity and a C entity. It derives from the disjoint property (D) of the subtypes\'\''
},

{
  class     : inproceedings,
  key       : 'RenggliGN10',
  authors   : ['Lukas Renggli', 'Tudor Girba', 'Oscar Nierstrasz'],
  title     : 'Embedding Languages without Breaking Tools',
  pages     : '380-404',
  booktitle : 'Proceedings of ECOOP 2010 - Object-Oriented Programming, 24th European Conference',
  publisher : 'Springer',
  series    : 'LNCS',
  volume    : 6183,
  year      : 2010,
  access    : adhoc,
  url       : 'http://scg.unibe.ch/archive/papers/Reng10aEmbeddingLanguages.pdf',
  note      : [],
  required  : ['Smalltalk'],
  provided  : ['embedded language'],
  annote    : 'The paper describes an embedding approach for the implementation of domain-specific languages (DSLs). Specifically, DSLs are modeled as language extensions of the underlying host language. The approach addresses the challenge of providing the language extensions in a manner that they integrate well with the development tools of the host language. The paper presents the extensible system \\emph{Helvetia} which intercepts the compilation pipeline of the Smalltalk host language to seamlessly integrate language extensions. See \\extraref{Tratt08} for another extensive discussion of language embedding.',
  figure    : 'The figure, taken from the paper, shows different interception options for realizing embedded languages in the Smalltalk-based \\emph{Helvetia} framework. A pidgin does not require a new parser, but the code needs to be transformed before the semantic analysis. A creole also requires a designated parser. An argot only affects the backend.'
},

{ 
  class     : article,
  key       : 'Reynolds98',
  authors   : ['John C. Reynolds'],
  title     : 'Definitional Interpreters for Higher-Order Programming Languages',
  journal   : 'Higher-Order and Symbolic Computation',
  volume    : 11,
  number    : 4,
  year      : 1998,
  pages     : '363-397',
  access    : open,
  url       : 'http://cs.au.dk/~hosc/local/HOSC-11-4-pp363-397.pdf',
  note      : ['This paper originally appeared as~\\extraref{Reynolds72}.'],
  required  : ['semantics'],
  provided  : ['interpreter', 'continuation'],
  annote    : 'The paper discusses the use of interpreters as definitions of languages. There are the notions of defining and defined language (similar to what is also called elsewhere meta and object language). The paper analyzes possible differences between the interpreter-based definition and the formal or informal definition. The paper also discusses different styles of interpreter definition, e.g., a less insightful meta-circular interpreter for a higher-order language versus a first-order interpreter for the same defined language. The issue of application-order dependence is analysed and addressed with continuations.',
  figure    : 'The figure, taken from the paper, shows a meta-circular interpreter for (in) a simple functional language with lambdas, constants, conditionals, and recursive let.'
},

{
  class     : inproceedings,
  key       : 'ErwigW11',
  authors   : ['Martin Erwig', 'Eric Walkingshaw'],
  title     : 'Semantics First! - Rethinking the Language Design Process',
  pages     : '243-262',
  booktitle : 'Software Language Engineering - 4th International Conference, SLE 2011, Revised Selected Papers',
  publisher : 'Springer',
  series    : 'LNCS',
  volume    : 6940,
  year      : 2012,
  access    : adhoc,
  url       : 'http://web.engr.oregonstate.edu/~erwig/papers/SemanticsFirst_SLE11.pdf',
  note      : [],
  required  : ['functional programming'],
  provided  : ['language design'],
  annote    : 'The paper suggests a semantics-centric approach to language design as opposed to a more syntax-based one. Haskell is used as a metalanguage. General language operators are employed to adapt and grow sophisticated languages out of simple semantics concepts.',
  figure    : 'The figure is taken from a book chapter~\\extraref{ErwigW12} that was derived from the conference paper at hand. The semantics-driven DSL design process is summarized. The idea is that one performs domain decomposition on the semantic side; one associates small languages with domains through domain modeling, and one also performs syntactic design to build a full language from the small languages.'
},

{
  class     : inproceedings,
  key       : 'Koskimies91',
  authors   : ['Kai Koskimies'],
  title     : 'Object-Orientation in Attribute Grammars',
  pages     : '297-329',
  booktitle : 'Attribute Grammars, Applications and Systems, International Summer School SAGA, Proceedings',
  publisher : 'Springer',
  series    : 'LNCS',
  volume    : '545',
  year      : 1991,
  access    : closed,
  url       : 'http://link.springer.com/chapter/10.1007\%2F3-540-54572-7_11',
  note      : [],
  required  : ['context-free grammar', 'attribute grammar', 'object orientation'],
  provided  : ['object-oriented context-free grammar', 'object-oriented context-free grammar'],
  annote    : 'The attribute grammar formalism is married with the object-oriented paradigm. Arguably, a side effect of this marriage is that the underlying context-free grammar formalism is also married with object orientation, which is interesting in so far that this (early) explanation of the correspondence is exploited nowadays in diverse mapping tools and code generators.',
  figure    : 'The figure shows two grammars for the same expression language taken from the paper. The first grammar is a conventional context-free grammar in terms of style, whereas the second grammar is restructured to be in an explicitly OO-enabled form. That is, an object model with single inheritance could be derived from the second grammar directly.'
},

/*

{
  class     : phdthesis,
  key       : 'Espinosa95',
  authors   : ['{David A.} Espinosa'], 
  title     : 'Semantic Lego',
  school    : 'Columbia University',
  year      : 1995,
  access    : adhoc,
  url       : 'http://groups.csail.mit.edu/mac/users/dae/papers/thesis.ps.Z',
  note      : [],
  required  : ['Scheme', 'semantics', 'functional programming'],
  provided  : ['interpreter', 'modular interpreter', 'monad', 'monad transformer'],
  annote    : 'This thesis (and related publications) describes a theoretically informed and practically useful approach to modularity in interpretation. Semantics is split into a computation ADT and a language ADT such that the latter is defined in terms of the former. Monads and monad transformers are used to build computation ADTs from composable parts. The ideas are realized in Scheme as a modular language construction set: \\emph{Semantic Lego}.',
  figure    : 'The Scheme fragment on the left, taken from the thesis, shows a simple interpreter (function $D$). In fact, this is merely a mapping from syntactical constructs to the corresponding functions of the language ADT. (Arguably, this is a catamorphism.) The table on the right, also taken from the thesis, lists the monads covered by \\emph{Semantic Lego} and identifies the defining type constructor.' 
},

*/

{
  class     : inproceedings,
  key       : 'HappelS06',
  authors   : ['Hans-J{\\"o}rg Happel', 'Stefan Seedorf'],
  title     : 'Applications of Ontologies in Software Engineering',  
  booktitle : 'Proceedings of International Workshop on Semantic Web Enabled Software Engineering (SWESE 2006)',
  year      : 2006,
  access    : adhoc,
  url       : 'http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.89.5733&rep=rep1&type=pdf',
  note      : [],
  required  : ['software engineering', 'ontology'],
  provided  : ['analysis', 'design', 'requirements engineering', 'component reuse', 'implementation', 'modeling', 'documentation', 'semantic middleware', 'semantic web service', 'maintenance', 'testing'],
  annote    : 'This paper takes an inventory of applications (usage categories) of ontologies in software engineering. It is rich in pointing out the relevance and potential of ontologies in various contexts (e.g., lifecyle phases) in software engineering.',
  figure    : 'The figure is taken from the paper. Different roles of ontologies in the context of software engineering are identified along two axes. Legend of acronyms used: Ontology-driven development (ODD), Ontology-enabled development (OED), Ontology-based architectures (OBA), Ontology-enabled architectures (OEA).'
},

{
  class     : 'inproceedings',
  key       : 'KurtevBZ02',
  authors   : ['Ivan Kurtev', 'Jean Bezivin', 'Mehmet Aksit'],
  title     : 'Technological spaces: An initial appraisal',
  booktitle : 'CoopIS, DOA 2002 Federated Conferences, Industrial track, Proceedings',
  year      : 2002,
  access    : adhoc,
  url       : 'http://eprints.eemcs.utwente.nl/10206/01/0363TechnologicalSpaces.pdf',
  note      : [],
  required  : ['model driven engineering'],
  provided  : ['technological space'],
  annote    : 'As suggested by the title, this is the record of the introduction of the technological space notion. Several spaces are identified and discussed: abstract/concrete syntaxes, database management systems, XML, ontology engineering, and MDA. The megamodel underlying the spaces is discussed and instantiated for some spaces. The need for and the role of bridges between the spaces is explained. See \\extraref{Bezivin06} for another, more recent description of technological spaces.',
  figure    : 'The figure, taken from the paper, shows five technological spaces and bridges between them.'
},

{
  class     : inproceedings,
  key       : 'Bezivin06',
  authors   : ['Jean B{\\\'e}zivin'],
  title     : 'Model Driven Engineering: An Emerging Technical Space',
  pages     : '36-64',
  booktitle : 'Generative and Transformational Techniques in Software Engineering, International Summer School, GTTSE 2005, Revised Papers',
  publisher : {Springer},
  series    : {LNCS},
  volume    : {4143},
  year      : 2006,
  access    : closed,
  url       : 'http://link.springer.com/chapter/10.1007\%2F11877028_2',
  note      : [],
  required  : ['software development'],
  provided  : ['technological space', 'model driven engineering', 'model transformation', 'metamodeling'],
  annote    : 'The paper describes the basic principles and practical characteristics of model driven engineering (MDE). The technological space notion (see also \\citeref{KurtevBZ02}) is used to organize much of the description. In particular, MDE is also compared to other technological spaces. The key notions of metamodeling and model transformation are illustrated. Various technologies and standards are placed in context, e.g., EMF and ATL.',
  figure    : 'The figure, taken from the conclusion of the paper, on the left, highlights two important relations involved in MDE---the `isRepresentedBy\' relation that some thing (perhaps a model) is represented by a model and the `conformsTo\' relation related to metamodeling. On the right, the progression from real-world entities, through models and metamodels, up to metametamodels is megamodeled.'
},

{ 
  class     : article,
  key       : 'Thomas03impedance',
  authors   : ['Dave Thomas'],
  title     : 'The Impedance Imperative, Tuples + Objects + Infosets = Too Much Stuff!',
  journal   : 'Journal of Object Technology',
  volume    : 2,
  number    : 8,
  year      : 2003,
  pages     : '7-12',
  access    : open,
  url       : 'http://www.jot.fm/issues/issue_2003_09/column1.pdf',
  note      : [],
  required  : ['data programming'],
  provided  : ['impedance mismatch'],
  annote    : 'The paper (a column, in fact) takes a critical look at data programming---specifically in the sense of CRUD (Create, Read, Update, Delete). The discussion covers indexed files, SQL and database access APIs, object-oriented databases, modern wrapping/mapping-based approaches (e.g., object/relational mapping). The column identifies various problems with data programming: diversity of data modeling and CRUD programming options and the practical need to mix them, difficulties of integrating different type systems and data query/transformation languages, proprietary developments, performance issues, and complexity of support technologies. The discussion also briefly touches some contenders that may address some of the problems. The paper may be a good starting point to look for technical publications on the topic.',
  figure    : 'The figure, taken from Wikipedia, obviously shows the Bermuda triangle. While working with Erik Meijer on \\extraref{LaemmelM06a,LaemmelM06b}, I picked up his intuition that data programming (because of the impedance mismatch) is essentially like operating in the Bermuda triangle. That is, data may disappear, if we allow this exaggeration. Just replace Bermuda, Florida, and Puerto Rico by XML, relational databases, and objects. (The idea of a triangle is an understatement because there are, of course, more competitors, e.g., Cobol and ontologies.)'
},

{ 
  class     : article,
  key       : 'MullerFBC12',
  authors   : ['Pierre-Alain Muller', 'Fr{\\\'e}d{\\\'e}ric Fondement', 'Benoit Baudry', 'Beno\\^{\\i}t Combemale'],
  title     : 'Modeling modeling modeling',
  journal   : 'Software and System Modeling',
  volume    : 11,
  number    : 3,
  year      : 2012,
  pages     : '347-359',
  access    : adhoc,
  url       : 'http://people.rennes.inria.fr/Benoit.Baudry/wp-publications/muller2010/',
  note      : [],
  required  : ['modeling', 'model driven engineering'],
  provided  : ['representation', 'theory of modeling'],
  annote    : 'The paper works towards a theory of modeling. There is a focus on the representation relation that is so central to modeling (in the sense that one thing \\emph{represents} another thing). In fact, different (canonical) kinds of representation relations are identified and organized in a corresponding metamodel. This foundational work is well positioned in the context of previous work on the foundations of modeling (and metamodeling).',
  figure    : 'The figure, taken from the paper, shows variations on the $\\mu$ relation. These variations are essentially based on differences with regard to the \\emph{intention} of things. Quoting from the paper: ``The intention of a thing thus represents the reason why someone would be using that thing, in which context, and what are the expectations vs.\\ that thing. It should be seen as a mixture of requirements, behavior, properties, and constraints, either satisfied or maintained by the thing.\'\'' 
}

].
